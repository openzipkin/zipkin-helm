# Copyright 2023 The OpenZipkin Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

replicaCount: 1

image:
  repository: openzipkin/zipkin-slim
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Image for use in helm.sh/hook: test
testImage:
  # The image registry to use
  registry: ghcr.io
  # The image repository to use
  repository: openzipkin/alpine
  # The image tag to use
  tag: "3.19.1"

# Zipkin start command
command: ["start-zipkin"]
# Arguments to pass to the zipkin start command
args: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Whether to use pod security policy
  psp: false

podAnnotations:
  sidecar.istio.io/inject: "false"

podSecurityContext:
  {}
# fsGroup: 2000

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  externalTrafficPolicy: ""
  type: ClusterIP
  port: 9411
  annotations: {}

serviceMonitor:
  # Creates a ServiceMonitor to scrape /prometheus
  enabled: false
  # Namespace to create the service monitor in
  namespace: ""
  #  interval: 10s
  #  scrapeTimeout: 10s
  # Add any labels required by your prometheus spec serviceMonitorSelector
  labels: {}
  #    release: prometheus

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # className: nginx
  host: chart-example.local
  path: /
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  limits:
    cpu: 500m
    memory: 4096Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

priorityClassName: ""

zipkin:
  discovery: {}
  # selfTracing generates traces for HTTP paths under /api
  selfTracing:
    enabled: false
  storage:
    type: mem
  #   type: elasticsearch
  #   elasticsearch:
  #      hosts: hostA hostB
  #      index: fooIndex
  extraEnv: {}
#    JAVA_OPTS: "-Xms128m -Xmx512m -XX:+ExitOnOutOfMemoryError"

# The below are typically only used in tests:
# extra containers to add to the same pod.
extraContainers: []

# extra ports to add besides the default service.port
extraServicePorts: []
#  - port: 9410
#    targetPort: 9410
#    protocol: TCP
#    name: scribe

# global variables to use in values. typically used in tests.
global: {}

# extra manifests to deploy with the helm chart
extraManifests: []
  # - apiVersion: v1
  #   kind: ConfigMap
  #   metadata:
  #     name: some-config
  #   data:
  #     example: true
